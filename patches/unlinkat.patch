diff -r 5a585bf34ff9 src/arch/arm/linux/process.cc
--- a/src/arch/arm/linux/process.cc	Wed Feb 18 15:13:18 2015 -0500
+++ b/src/arch/arm/linux/process.cc	Thu Apr 09 11:33:51 2015 -0400
@@ -523,7 +523,7 @@
     /*   32 */ SyscallDesc("flock", unimplementedFunc),
     /*   33 */ SyscallDesc("mknodat", unimplementedFunc),
     /*   34 */ SyscallDesc("mkdirat", unimplementedFunc),
-    /*   35 */ SyscallDesc("unlinkat", unimplementedFunc),
+    /*   35 */ SyscallDesc("unlinkat", unlinkatFunc<ArmLinux64>),
     /*   36 */ SyscallDesc("symlinkat", unimplementedFunc),
     /*   37 */ SyscallDesc("linkat", unimplementedFunc),
     /*   38 */ SyscallDesc("renameat", unimplementedFunc),
diff -r 5a585bf34ff9 src/sim/syscall_emul.cc
--- a/src/sim/syscall_emul.cc	Wed Feb 18 15:13:18 2015 -0500
+++ b/src/sim/syscall_emul.cc	Thu Apr 09 11:33:51 2015 -0400
@@ -389,9 +389,15 @@
 SyscallReturn
 unlinkFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)
 {
+    return unlinkHelper(desc, num, p, tc, 0);
+}
+
+SyscallReturn
+unlinkHelper(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc,
+            int index)
+{
     string path;
 
-    int index = 0;
     if (!tc->getMemProxy().tryReadString(path, p->getSyscallArg(tc, index)))
         return -EFAULT;
 
diff -r 5a585bf34ff9 src/sim/syscall_emul.hh
--- a/src/sim/syscall_emul.hh	Wed Feb 18 15:13:18 2015 -0500
+++ b/src/sim/syscall_emul.hh	Thu Apr 09 11:33:51 2015 -0400
@@ -261,6 +261,9 @@
                            LiveProcess *p, ThreadContext *tc);
 
 /// Target unlink() handler.
+SyscallReturn unlinkHelper(SyscallDesc *desc, int num,
+                           LiveProcess *p, ThreadContext *tc,
+                           int index);
 SyscallReturn unlinkFunc(SyscallDesc *desc, int num,
                          LiveProcess *p, ThreadContext *tc);
 
@@ -701,6 +704,19 @@
         warn("openat: first argument not AT_FDCWD; unlikely to work");
     return openFunc<OS>(desc, callnum, process, tc, 1);
 }
+/// Target unlinkat() handler.
+template <class OS>
+SyscallReturn
+unlinkatFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
+             ThreadContext *tc)
+{
+    int index = 0;
+    int dirfd = process->getSyscallArg(tc, index);
+    if (dirfd != OS::TGT_AT_FDCWD)
+        warn("unlinkat: first argument not AT_FDCWD; unlikely to work");
+
+    return unlinkHelper(desc, callnum, process, tc, 1);
+}
 
 /// Target facessat() handler
 template <class OS>
@@ -1184,7 +1200,7 @@
     if (result < 0)
         return -errno;
 
-    return 0;
+    return result;
 }
 
 
